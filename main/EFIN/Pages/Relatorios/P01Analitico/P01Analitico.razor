@page "/p01analitico"

@inject Business.ContasAPagar.Interfaces.IContasAPagarService contasAPagarService;

<div class="container">
    <div class="row d-flex justify-content-center">
        <fieldset>
            <legend>Relatório Analítico Contas a Pagar - P01</legend>
            <p>Faz a impressão do relatório contas a pagar analítico</p>
        </fieldset>
    </div>
</div>
<hr />
@if (relatorioEmTela.Count <= 0)
{
    <ParametrosP01 ParametrosCallBack="GerarRelatorio"></ParametrosP01>
}
else
{
    <P01Resultado Relatorio="@relatorioEmTela"></P01Resultado>
}
@if (processando)
{
    <br />
    <br />
    <MatProgressBar Indeterminate="true" Reversed="true"></MatProgressBar>

}

@code {

    [Inject]
    BlazorDownloadFile.IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    private ParametrosContasAPagarP01 parametros;
    private IList<RelatorioContasAPagarP01> relatorioEmTela;
    private bool showParametros = true;
    private bool processando;


    protected override void OnInitialized()
    {
        relatorioEmTela = new List<RelatorioContasAPagarP01>();
    }


    private async Task GerarRelatorio(ParametrosContasAPagarP01 parametros)
    {
        string filename = $"relatorio_{DateTime.Now.Ticks.ToString()}.xlsx";

        if (parametros.GeraEmTela)
        {
            processando = true;
            this.StateHasChanged();
            relatorioEmTela = await contasAPagarService.RelatorioContasAPagarP01Asycn(parametros);
            processando = false;
            this.StateHasChanged();
        }

        if (parametros.GeraEmExcel)
        {
            processando = true;
            this.StateHasChanged();
            var arquivo = await contasAPagarService.RelatorioContasAPagarP01ExcelAsync(parametros);
            await BlazorDownloadFileService.DownloadFile(filename, arquivo, "application/octet-stream");
            processando = false;
            this.StateHasChanged();
        }

    }
}
